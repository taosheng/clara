#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Slack chat-bot Lambda handler.
"""

import os
import logging
import urllib
import random
from elasticsearch import Elasticsearch, RequestsHttpConnection
from requests_aws4auth import AWS4Auth
from awsconfig import ESHOST, REGION
from nocheckin import aws_access_key_id,aws_secret_access_key
from nocheckin import BOT_TOKEN

SLACK_URL = "https://slack.com/api/chat.postMessage"
min_score=2
host = ESHOST
region = REGION

awsauth = AWS4Auth(aws_access_key_id, aws_secret_access_key, region, 'es')

es = Elasticsearch(
    hosts=[{'host': host, 'port': 443}],
    http_auth=awsauth,
    use_ssl=True,
    verify_certs=True,
    connection_class=RequestsHttpConnection
)


def lambda_handler(data, context):
    """Handle an incoming HTTP request from a Slack chat-bot.
    """
    # Grab the Slack event data.
    if "challenge" in data:
        return data["challenge"]
    
    slack_event = data['event']
    # We need to discriminate between events generated by 
    # the users, which we want to process and handle, 
    # and those generated by the bot.
    if "bot_id" in slack_event:
        logging.warn("Ignore bot event")
        logging.warn(str(data))
    else:
        # Get the text of the message the user sent to the bot,
        # and reverse it.
        text = slack_event["text"]
        even = {'msg':text , 'index':'books1', "field":'pkey',"res":"res", "score":0.75  }
        reversed_text = kbhandler(even)
        
        # Get the ID of the channel where the message was posted.
        channel_id = slack_event["channel"]
        
        # We need to send back three pieces of information:
        #     1. The reversed text (text)
        #     2. The channel id of the private, direct chat (channel)
        #     3. The OAuth token required to communicate with 
        #        the API (token)
        # Then, create an associative array and URL-encode it, 
        # since the Slack API doesn't not handle JSON (bummer).
        data = urllib.parse.urlencode(
            (
                ("token", BOT_TOKEN),
                ("channel", channel_id),
                ("text", reversed_text)
            )
        )
        data = data.encode("ascii")
        
        # Construct the HTTP request that will be sent to the Slack API.
        request = urllib.request.Request(
            SLACK_URL, 
            data=data, 
            method="POST"
        )
        # Add a header mentioning that the text is URL-encoded.
        request.add_header(
            "Content-Type", 
            "application/x-www-form-urlencoded"
        )
        
        # Fire off the request!
        urllib.request.urlopen(request).read()

    # Everything went fine.
    return "200 OK"






def kbhandler(even):
# even structure
# {'msg','' , 'index':'testi',
#  "field":'pkey',"res":"res", 
#  "score":2  } #min_score

    msg = even['msg']
    field = even['field']
    idx = even['index']
    if "score" in even:
        min_score = int(even['score'])

    q = {
      "min_score": min_score,
      "query" :{
      "multi_match" : {
        "query": msg, 
        "fields": [ field]
      }
      }
    }   

    res = es.search(index=idx, body=q)
    print("Got %d Hits:" % res['hits']['total'])
    allposi =[]
    allposiScore =[]
    cntPossible = 0
    for h in res['hits']['hits']:
        #print(h)
        score = int(h['_score'])+1
        if type(allposi) == type(h['_source']['res']) :
            allposi = allposi + h['_source']['res']
        else:
            continue
        allposiScore.append(score)
        cntPossible += 1
        #result = random.choice((h['_source']['res']))
        #return result
    toPick = []
    for exdi in range(cntPossible):
        toPick = toPick + [exdi] * allposiScore[exdi]
    #print(toPick)
    if len(allposi) > 0:
        resultPick = random.choice(toPick)
        result = allposi[resultPick]
        return result

    return ""


if __name__ == '__main__':

    import sys
    index = sys.argv[1]
    msg = sys.argv[2]
    even = {'msg':msg , 'index':index, "field":'pkey',"res":"res", "score":0.75}
    r = kbhandler(even)
    print("==== result ===")
    print(r)
